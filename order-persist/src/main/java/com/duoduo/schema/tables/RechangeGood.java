/**
 * This class is generated by jOOQ
 */
package com.duoduo.schema.tables;


import com.duoduo.schema.DuoduoOrder;
import com.duoduo.schema.Keys;
import com.duoduo.schema.tables.records.RechangeGoodRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RechangeGood extends TableImpl<RechangeGoodRecord> {

    private static final long serialVersionUID = -537078604;

    /**
     * The reference instance of <code>duoduo_order.rechange_good</code>
     */
    public static final RechangeGood RECHANGE_GOOD = new RechangeGood();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RechangeGoodRecord> getRecordType() {
        return RechangeGoodRecord.class;
    }

    /**
     * The column <code>duoduo_order.rechange_good.id</code>.
     */
    public final TableField<RechangeGoodRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>duoduo_order.rechange_good.status</code>. 0-其他原因,1-换货寄回中,2-换货重寄中,3-已换货
     */
    public final TableField<RechangeGoodRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "0-其他原因,1-换货寄回中,2-换货重寄中,3-已换货");

    /**
     * The column <code>duoduo_order.rechange_good.order_id</code>.
     */
    public final TableField<RechangeGoodRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>duoduo_order.rechange_good.express_order_no</code>. 快递单号
     */
    public final TableField<RechangeGoodRecord, String> EXPRESS_ORDER_NO = createField("express_order_no", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "快递单号");

    /**
     * The column <code>duoduo_order.rechange_good.express_company_name</code>. 快递公司
     */
    public final TableField<RechangeGoodRecord, String> EXPRESS_COMPANY_NAME = createField("express_company_name", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "快递公司");

    /**
     * The column <code>duoduo_order.rechange_good.rechange_reason</code>. 换货原因
     */
    public final TableField<RechangeGoodRecord, String> RECHANGE_REASON = createField("rechange_reason", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "换货原因");

    /**
     * The column <code>duoduo_order.rechange_good.express_amount</code>. 快递费
     */
    public final TableField<RechangeGoodRecord, BigDecimal> EXPRESS_AMOUNT = createField("express_amount", org.jooq.impl.SQLDataType.DECIMAL.precision(10, 2), this, "快递费");

    /**
     * The column <code>duoduo_order.rechange_good.remark</code>. 备注
     */
    public final TableField<RechangeGoodRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "备注");

    /**
     * The column <code>duoduo_order.rechange_good.create_time</code>.
     */
    public final TableField<RechangeGoodRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>duoduo_order.rechange_good.update_time</code>.
     */
    public final TableField<RechangeGoodRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>duoduo_order.rechange_good</code> table reference
     */
    public RechangeGood() {
        this("rechange_good", null);
    }

    /**
     * Create an aliased <code>duoduo_order.rechange_good</code> table reference
     */
    public RechangeGood(String alias) {
        this(alias, RECHANGE_GOOD);
    }

    private RechangeGood(String alias, Table<RechangeGoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private RechangeGood(String alias, Table<RechangeGoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DuoduoOrder.DUODUO_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RechangeGoodRecord, Long> getIdentity() {
        return Keys.IDENTITY_RECHANGE_GOOD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RechangeGoodRecord> getPrimaryKey() {
        return Keys.KEY_RECHANGE_GOOD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RechangeGoodRecord>> getKeys() {
        return Arrays.<UniqueKey<RechangeGoodRecord>>asList(Keys.KEY_RECHANGE_GOOD_PRIMARY, Keys.KEY_RECHANGE_GOOD_U_ORDER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RechangeGood as(String alias) {
        return new RechangeGood(alias, this);
    }

    /**
     * Rename this table
     */
    public RechangeGood rename(String name) {
        return new RechangeGood(name, null);
    }
}
