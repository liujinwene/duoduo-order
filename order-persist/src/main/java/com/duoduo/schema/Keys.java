/**
 * This class is generated by jOOQ
 */
package com.duoduo.schema;


import com.duoduo.schema.tables.Configuration;
import com.duoduo.schema.tables.Order;
import com.duoduo.schema.tables.RechangeGood;
import com.duoduo.schema.tables.RetreatGood;
import com.duoduo.schema.tables.Shop;
import com.duoduo.schema.tables.records.ConfigurationRecord;
import com.duoduo.schema.tables.records.OrderRecord;
import com.duoduo.schema.tables.records.RechangeGoodRecord;
import com.duoduo.schema.tables.records.RetreatGoodRecord;
import com.duoduo.schema.tables.records.ShopRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>duoduo_order</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ConfigurationRecord, Long> IDENTITY_CONFIGURATION = Identities0.IDENTITY_CONFIGURATION;
    public static final Identity<OrderRecord, Long> IDENTITY_ORDER = Identities0.IDENTITY_ORDER;
    public static final Identity<RechangeGoodRecord, Long> IDENTITY_RECHANGE_GOOD = Identities0.IDENTITY_RECHANGE_GOOD;
    public static final Identity<RetreatGoodRecord, Long> IDENTITY_RETREAT_GOOD = Identities0.IDENTITY_RETREAT_GOOD;
    public static final Identity<ShopRecord, Long> IDENTITY_SHOP = Identities0.IDENTITY_SHOP;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ConfigurationRecord> KEY_CONFIGURATION_PRIMARY = UniqueKeys0.KEY_CONFIGURATION_PRIMARY;
    public static final UniqueKey<ConfigurationRecord> KEY_CONFIGURATION_U_NAME = UniqueKeys0.KEY_CONFIGURATION_U_NAME;
    public static final UniqueKey<OrderRecord> KEY_ORDER_PRIMARY = UniqueKeys0.KEY_ORDER_PRIMARY;
    public static final UniqueKey<OrderRecord> KEY_ORDER_U_ORDER_ID = UniqueKeys0.KEY_ORDER_U_ORDER_ID;
    public static final UniqueKey<RechangeGoodRecord> KEY_RECHANGE_GOOD_PRIMARY = UniqueKeys0.KEY_RECHANGE_GOOD_PRIMARY;
    public static final UniqueKey<RechangeGoodRecord> KEY_RECHANGE_GOOD_U_ORDER_ID = UniqueKeys0.KEY_RECHANGE_GOOD_U_ORDER_ID;
    public static final UniqueKey<RetreatGoodRecord> KEY_RETREAT_GOOD_PRIMARY = UniqueKeys0.KEY_RETREAT_GOOD_PRIMARY;
    public static final UniqueKey<RetreatGoodRecord> KEY_RETREAT_GOOD_U_ORDER_ID = UniqueKeys0.KEY_RETREAT_GOOD_U_ORDER_ID;
    public static final UniqueKey<ShopRecord> KEY_SHOP_PRIMARY = UniqueKeys0.KEY_SHOP_PRIMARY;
    public static final UniqueKey<ShopRecord> KEY_SHOP_U_ACCOUNT = UniqueKeys0.KEY_SHOP_U_ACCOUNT;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<ConfigurationRecord, Long> IDENTITY_CONFIGURATION = createIdentity(Configuration.CONFIGURATION, Configuration.CONFIGURATION.ID);
        public static Identity<OrderRecord, Long> IDENTITY_ORDER = createIdentity(Order.ORDER, Order.ORDER.ID);
        public static Identity<RechangeGoodRecord, Long> IDENTITY_RECHANGE_GOOD = createIdentity(RechangeGood.RECHANGE_GOOD, RechangeGood.RECHANGE_GOOD.ID);
        public static Identity<RetreatGoodRecord, Long> IDENTITY_RETREAT_GOOD = createIdentity(RetreatGood.RETREAT_GOOD, RetreatGood.RETREAT_GOOD.ID);
        public static Identity<ShopRecord, Long> IDENTITY_SHOP = createIdentity(Shop.SHOP, Shop.SHOP.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<ConfigurationRecord> KEY_CONFIGURATION_PRIMARY = createUniqueKey(Configuration.CONFIGURATION, "KEY_configuration_PRIMARY", Configuration.CONFIGURATION.ID);
        public static final UniqueKey<ConfigurationRecord> KEY_CONFIGURATION_U_NAME = createUniqueKey(Configuration.CONFIGURATION, "KEY_configuration_u_name", Configuration.CONFIGURATION.NAME);
        public static final UniqueKey<OrderRecord> KEY_ORDER_PRIMARY = createUniqueKey(Order.ORDER, "KEY_order_PRIMARY", Order.ORDER.ID);
        public static final UniqueKey<OrderRecord> KEY_ORDER_U_ORDER_ID = createUniqueKey(Order.ORDER, "KEY_order_u_order_id", Order.ORDER.ORDER_ID);
        public static final UniqueKey<RechangeGoodRecord> KEY_RECHANGE_GOOD_PRIMARY = createUniqueKey(RechangeGood.RECHANGE_GOOD, "KEY_rechange_good_PRIMARY", RechangeGood.RECHANGE_GOOD.ID);
        public static final UniqueKey<RechangeGoodRecord> KEY_RECHANGE_GOOD_U_ORDER_ID = createUniqueKey(RechangeGood.RECHANGE_GOOD, "KEY_rechange_good_u_order_id", RechangeGood.RECHANGE_GOOD.ORDER_ID);
        public static final UniqueKey<RetreatGoodRecord> KEY_RETREAT_GOOD_PRIMARY = createUniqueKey(RetreatGood.RETREAT_GOOD, "KEY_retreat_good_PRIMARY", RetreatGood.RETREAT_GOOD.ID);
        public static final UniqueKey<RetreatGoodRecord> KEY_RETREAT_GOOD_U_ORDER_ID = createUniqueKey(RetreatGood.RETREAT_GOOD, "KEY_retreat_good_u_order_id", RetreatGood.RETREAT_GOOD.ORDER_ID);
        public static final UniqueKey<ShopRecord> KEY_SHOP_PRIMARY = createUniqueKey(Shop.SHOP, "KEY_shop_PRIMARY", Shop.SHOP.ID);
        public static final UniqueKey<ShopRecord> KEY_SHOP_U_ACCOUNT = createUniqueKey(Shop.SHOP, "KEY_shop_u_account", Shop.SHOP.ACCOUNT);
    }
}
